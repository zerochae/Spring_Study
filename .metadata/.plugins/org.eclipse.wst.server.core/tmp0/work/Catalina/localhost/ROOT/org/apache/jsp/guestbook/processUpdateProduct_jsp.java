/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-10-26 03:36:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guestbook;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import jdbc.JdbcUtil;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;

public final class processUpdateProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1634195636445L));
    _jspx_dependants.put("jar:file:/C:/workspace/6.JspSpring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/JspServlet/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("jdbc.JdbcUtil");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");


	//cos.jar 사용하여 파일 처리
	
	String filename = "";
	String realFolder = "C:\\Users\\zeroc\\git\\JSP_Study\\JspServlet\\WebContent\\images";
	
	// 인코딩 타입
	String encType = "UTF-8";
	
	// 최대 업로드도리 파일의 크기 5MB
	int maxSize = 5 * 1024 * 1024;
	
	MultipartRequest multi = new MultipartRequest(request, realFolder, maxSize, encType, new DefaultFileRenamePolicy());
	
	String productId    = multi.getParameter("productId");
	String name         = multi.getParameter("name");
	String unitPrice    = multi.getParameter("unitPrice");
	String description  = multi.getParameter("description");
	String manufacturer = multi.getParameter("manufacturer");
	String category     = multi.getParameter("category");
	String unitsInStock = multi.getParameter("unitsInStock");
	String condition    = multi.getParameter("condition ");
	
	
	// udpate 시 setInt() 메소드를 위해 int형으로 casting
	int price = Integer.parseInt(unitPrice);
	int stock = Integer.parseInt(unitsInStock);
	
	// 업로드가 완료된 첨부파일의 이름 정보 추출
	Enumeration files = multi.getFileNames();
	String fname = (String)files.nextElement();
	// 업로드된 파일의 실제 파일명을 가져옴
	String fileName = multi.getFilesystemName(fname);
	
	// Database 테이블로 update
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try{
			conn = DriverManager.getConnection("jdbc:apache:commons:dbcp:ddit");
			String sql = "select * from product where p_id = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, productId);
			rs = pstmt.executeQuery();
			
			// id에 해당하는 상품이 있을때만 update 처리
			if(rs.next()){
				
				// 1) 요청 파라미터 중에서 이미지 파일이 있으면 실행
				
				if(fileName!=null){
					sql = " UPDATE PRODUCT "
						+" SET P_NAME = ?,      "
						+"P_UNITPRICE= ?,     "
						+"P_DESCRIPTION= ?,   "
						+"P_CATEGORY= ?,      "
						+"P_MANUFACTURER= ?,  "
						+"P_UNITSINSTOCK= ?,  "
						+"P_CONDITION= ?,     "
						+"P_FILENAME= ?      "
						+"WHERE P_ID=? ";
					
					pstmt = conn.prepareStatement(sql);
					
					pstmt.setString(1,name          );
					pstmt.setString(2,unitPrice     );
					pstmt.setString(3,description   );
					pstmt.setString(4,category      );
					pstmt.setString(5,manufacturer  );
					pstmt.setString(6,unitsInStock  );
					pstmt.setString(7,condition     );
					pstmt.setString(8,filename      );
					pstmt.setString(9,productId     );
					pstmt.executeUpdate();
					
				} else { // 2) 요청 파라미터 중에서 이미지 파일이 없으면 실행
					
					sql = " UPDATE PRODUCT "
							+" SET P_NAME = ?,      "
							+"P_UNITPRICE= ?,     "
							+"P_DESCRIPTION= ?,   "
							+"P_CATEGORY= ?,      "
							+"P_MANUFACTURER= ?,  "
							+"P_UNITSINSTOCK= ?,  "
							+"P_CONDITION= ?    "
							+"WHERE P_ID=? ";
				
					pstmt = conn.prepareStatement(sql);
					
					pstmt.setString(1,name          );
					pstmt.setString(2,unitPrice     );
					pstmt.setString(3,description   );
					pstmt.setString(4,category      );
					pstmt.setString(5,manufacturer  );
					pstmt.setString(6,unitsInStock  );
					pstmt.setString(7,condition     );
					pstmt.setString(8,productId     );
					pstmt.executeUpdate();

					
				} // end if


			}
			

		
		} catch (SQLException e){
			out.print(e.getMessage());	
		} finally {
			JdbcUtil.close(rs);
			JdbcUtil.close(pstmt);
			JdbcUtil.close(conn);
		}
		
		response.sendRedirect("editProduct.jsp?edit=update");
		
		

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
