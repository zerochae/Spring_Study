/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-10-25 10:53:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guestbook;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import kr.or.ddit.guestbook.vo.Product;
import java.sql.DriverManager;
import jdbc.JdbcUtil;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;

public final class addCart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1634195636445L));
    _jspx_dependants.put("jar:file:/C:/workspace/6.JspSpring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/JspServlet/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("jdbc.JdbcUtil");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("kr.or.ddit.guestbook.vo.Product");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   String id = request.getParameter("id");
   if (id == null || id.trim().equals("")) {
      // response 내장 객체를 통해 상품 목록으로 이동
      response.sendRedirect("products.jsp");
      // 밑의 구문은 더이상 실행하지 않음
      return;
   }
   
   Connection conn = null;
   PreparedStatement pstmt = null;
   ResultSet rs = null;
   
   try {
      conn = DriverManager.getConnection("jdbc:apache:commons:dbcp:ddit");
      String sql = "select * from product where P_ID = ?";
      pstmt = conn.prepareStatement(sql);
      pstmt.setString(1, id);
      rs = pstmt.executeQuery();
      
      if (rs.next()) { // 1행이 존재하면
         // 기본생성자를 통한 객체 생성
         Product product = new Product();
      
         // id에 해당하는 상품정보를 select하여 Product 객체에 setting
         product.setProductId(rs.getString("P_ID"));
         product.setPname(rs.getString("P_NAME"));
         product.setUnitPrice(rs.getInt("P_UNITPRICE"));
         product.setDescription(rs.getString("P_DESCRIPTION"));
         product.setCategory(rs.getString("P_CATEGORY"));
         product.setManufacturer(rs.getString("P_MANUFACTURER"));
         product.setUnitsInStock(rs.getInt("P_UNITSINSTOCK"));
         product.setCondition(rs.getString("P_CONDITION"));
         product.setFilename(rs.getString("P_FILENAME"));
         
         // 상품을 세션에 담음 (장바구니에 담음)
         // 세션 속성 이름 cartlist(장바구니)의 세션 정보(장바구니에 등록된 데이터)를 얻어와
         // ArrayList 객체에 저장
         ArrayList<Product> list = (ArrayList<Product>) session.getAttribute("cartlist");
         // 만약 ArrayList 객체에 저장된 세션 정보가 없다면 ArrayList를 생성하고
         // 이를 세션 속성이름 cartlist의 속성 값으로 저장
         // 요청 파라미터 아이디(id)의 상품을 담은 장바구니를 초기화
         if (list == null) { // 장바구니에 담긴 상품이 없다면
            list = new ArrayList<Product>();
            // 장바구니 상품 수량을 1로 셋팅
            product.setQuantity(1);
            // 리스트에 상품정보 객체를 넣어줌
            list.add(product);
            // 장바구니에 session 내장 객쳉 setting 해줌 !!!! 중요
            session.setAttribute("cartlist", list);
         } else { // 장바구니에 상품들이 담겨있다면
            Product goodsQnt = new Product();
         	boolean chk = false;
            for (int i=0; i<list.size(); i++) {
               goodsQnt = list.get(i);
               // 요청 파라미터 아이디의 상품이 장바구니에 담긴 목록이면 해당 상품의 수량(quantity)을 1 증가
               if (goodsQnt.getProductId().equals(id)) {
                  int orderQuantity = goodsQnt.getQuantity() + 1;
                  goodsQnt.setQuantity(orderQuantity);
                  
                  chk = true;
               }
            }
            if(!chk){
            	product.setQuantity(1);
            	list.add(product);
            }
         }
         
      } else { // id에 해당하는 상품이 없다면
         response.sendRedirect("exceptionNoProductId.jsp");
      }
      
   } catch (SQLException e) {
      e.printStackTrace();
   } finally {
      JdbcUtil.close(rs);
      JdbcUtil.close(pstmt);
      JdbcUtil.close(conn);
   }
   response.sendRedirect("product.jsp?id="+id);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>장바구니</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
